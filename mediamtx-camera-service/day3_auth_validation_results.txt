/usr/lib/python3/dist-packages/pytest_asyncio/plugin.py:207: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
============================= test session starts ==============================
platform linux -- Python 3.13.3, pytest-8.3.5, pluggy-1.6.0
rootdir: /home/carlossprekelsen/CameraRecorder/mediamtx-camera-service
configfile: pytest.ini
plugins: cov-6.2.1, asyncio-0.25.1, typeguard-4.4.2
asyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None
collected 22 items

tests/documentation/test_security_docs.py ................F..F..         [100%]

=================================== FAILURES ===================================
__ TestSecurityImplementationValidation.test_input_validation_implementation ___

self = <test_security_docs.TestSecurityImplementationValidation object at 0x778c80a35350>

    def test_input_validation_implementation(self):
        """Test input validation implementation."""
        # Test input validation
        try:
            result = subprocess.run([
                'python3', '-c',
                'import re; ' +
                'user_input = "admin\'; DROP TABLE users; --"; ' +
                'sanitized = re.sub(r"[;\'\"\\-]", "", user_input); ' +
                'safe = ";" not in sanitized and "\'" not in sanitized; ' +
                'assert safe == True; ' +
                'print("Input validation implementation: SUCCESS")'
            ], capture_output=True, text=True)
    
            if result.returncode == 0:
                log_success("Input validation implementation validated")
            else:
                log_error("Input validation implementation validation failed")
>               pytest.fail("Input validation implementation not working")
E               Failed: Input validation implementation not working

tests/documentation/test_security_docs.py:393: Failed
------------------------------ Captured log call -------------------------------
ERROR    test_security_docs:test_security_docs.py:31 ERROR: Input validation implementation validation failed
___ TestSecurityImplementationValidation.test_error_handling_implementation ____

self = <test_security_docs.TestSecurityImplementationValidation object at 0x778c80ad59d0>

    def test_error_handling_implementation(self):
        """Test error handling implementation."""
        # Test error handling
        try:
            result = subprocess.run([
                'python3', '-c',
                'try: ' +
                '    raise ValueError("Test error"); ' +
                'except ValueError as e: ' +
                '    error_response = {"error": "validation_failed", "message": str(e)}; ' +
                '    print("Error handling implementation: SUCCESS")'
            ], capture_output=True, text=True)
    
            if result.returncode == 0:
                log_success("Error handling implementation validated")
            else:
                log_error("Error handling implementation validation failed")
>               pytest.fail("Error handling implementation not working")
E               Failed: Error handling implementation not working

tests/documentation/test_security_docs.py:458: Failed
------------------------------ Captured log call -------------------------------
ERROR    test_security_docs:test_security_docs.py:31 ERROR: Error handling implementation validation failed
=========================== short test summary info ============================
FAILED tests/documentation/test_security_docs.py::TestSecurityImplementationValidation::test_input_validation_implementation
FAILED tests/documentation/test_security_docs.py::TestSecurityImplementationValidation::test_error_handling_implementation
========================= 2 failed, 20 passed in 1.59s =========================
