#!/usr/bin/env python3
"""
Setup test environment by reading JWT secret from the same source as the service.

This script reads the JWT secret from the service's configuration and sets it
as an environment variable for tests, ensuring tests use the same secret as
the running service.

Usage:
    python scripts/setup_test_environment.py
    source .test_env  # Load the environment variables
"""

import os
import sys
import subprocess
from pathlib import Path

def read_jwt_secret_from_service():
    """Read JWT secret from the same source as the service."""
    jwt_secret = None
    
    # Try to read from .env file first (same as service)
    env_file_path = "/opt/camera-service/.env"
    try:
        # Try direct read first (should work if user is in camera-service group)
        with open(env_file_path, 'r') as f:
            for line in f:
                if line.startswith('CAMERA_SERVICE_JWT_SECRET='):
                    jwt_secret = line.split('=', 1)[1].strip()
                    break
        print(f"‚úÖ Read JWT secret directly from {env_file_path}")
    except (FileNotFoundError, PermissionError) as e:
        print(f"‚ö†Ô∏è  Direct read failed: {e}")
        # If direct read fails, try with sudo
        try:
            result = subprocess.run(['sudo', 'grep', '^CAMERA_SERVICE_JWT_SECRET=', env_file_path], 
                                  capture_output=True, text=True, check=True)
            jwt_secret = result.stdout.strip().split('=', 1)[1]
            print(f"‚úÖ Read JWT secret using sudo")
        except (subprocess.CalledProcessError, FileNotFoundError) as e:
            print(f"‚ö†Ô∏è  Sudo read failed: {e}")
    
    # Fallback to environment variable
    if not jwt_secret:
        jwt_secret = os.getenv("CAMERA_SERVICE_JWT_SECRET")
        if jwt_secret:
            print(f"‚úÖ Read JWT secret from environment variable")
    
    # Final fallback to default (same as service)
    if not jwt_secret:
        jwt_secret = "dev-secret-change-me"
        print(f"‚ö†Ô∏è  Using default JWT secret")
    
    return jwt_secret

def setup_test_environment():
    """Setup test environment variables."""
    jwt_secret = read_jwt_secret_from_service()
    
    if not jwt_secret:
        print("ERROR: Could not find JWT secret in service configuration")
        return False
    
    # Create .test_env file with the environment variables
    test_env_content = f"""# Test environment variables
# Generated by setup_test_environment.py
# This file should be sourced before running tests

export CAMERA_SERVICE_JWT_SECRET="{jwt_secret}"
export CAMERA_SERVICE_API_KEYS_PATH="/tmp/test_api_keys.json"
export CAMERA_SERVICE_TEST_MODE="true"
export CAMERA_SERVICE_DISABLE_HARDWARE="true"
export CAMERA_SERVICE_RATE_RPM="1000"
"""
    
    # Write to .test_env file
    test_env_path = Path(__file__).parent.parent / ".test_env"
    with open(test_env_path, 'w') as f:
        f.write(test_env_content)
    
    print(f"‚úÖ Test environment setup complete!")
    print(f"üìÅ Environment file: {test_env_path}")
    print(f"üîë JWT Secret: {jwt_secret[:10]}...")
    print(f"\nTo use in tests, run:")
    print(f"  source {test_env_path}")
    print(f"  python -m pytest tests/")
    
    return True

def main():
    """Main function."""
    print("üîß Setting up test environment...")
    
    if setup_test_environment():
        print("\n‚úÖ Test environment setup successful!")
        sys.exit(0)
    else:
        print("\n‚ùå Test environment setup failed!")
        sys.exit(1)

if __name__ == "__main__":
    main()
