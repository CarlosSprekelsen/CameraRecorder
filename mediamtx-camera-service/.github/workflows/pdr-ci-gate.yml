name: PDR CI Gate - No-Mock Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'pdr'
        type: choice
        options:
        - pdr
        - integration
        - ivv
        - all

env:
  FORBID_MOCKS: 1
  PYTHON_VERSION: "3.10"
  MEDIAMTX_VERSION: "v1.5.0"

jobs:
  # Job 1: Environment Setup and Dependencies
  setup:
    runs-on: ubuntu-latest
    outputs:
      setup-complete: ${{ steps.setup.outputs.complete }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg v4l-utils curl wget
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Setup MediaMTX
      run: |
        # Download and setup MediaMTX for testing
        wget -O mediamtx https://github.com/bluenviron/mediamtx/releases/download/${{ env.MEDIAMTX_VERSION }}/mediamtx_linux_amd64
        chmod +x mediamtx
        sudo mv mediamtx /usr/local/bin/
        
    - name: Validate setup
      run: |
        python --version
        pytest --version
        mediamtx --version
        ffmpeg -version
        
    - name: Setup complete
      id: setup
      run: echo "complete=true" >> $GITHUB_OUTPUT

  # Job 2: Code Quality and Linting
  code-quality:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        pip install -r requirements-dev.txt
        
    - name: Run linting
      run: |
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Run type checking
      run: |
        mypy src/ --ignore-missing-imports --disallow-untyped-defs
        
    - name: Run code formatting check
      run: |
        black --check src/ tests/

  # Job 3: Unit Tests (with mocks allowed)
  unit-tests:
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        pip install -r requirements-dev.txt
        
    - name: Run unit tests
      run: |
        python -m pytest tests/unit/ -v --tb=short --cov=src --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  # Job 4: PDR Integration Tests (NO MOCKS)
  pdr-integration:
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 30
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        pip install -r requirements-dev.txt
        
    - name: Start MediaMTX service
      run: |
        # Start MediaMTX in background for integration tests
        mediamtx &
        sleep 5
        
    - name: Run PDR integration tests (NO MOCKS)
      env:
        FORBID_MOCKS: 1
        MEDIAMTX_HOST: localhost
        MEDIAMTX_API_PORT: 9997
      run: |
        timeout 300 python -m pytest tests/pdr/ -v --tb=short -s --timeout=60
        
    - name: Collect test artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: pdr-test-results
        path: |
          test-results/
          coverage.xml
          *.log

  # Job 5: IVV Tests (NO MOCKS)
  ivv-tests:
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 20
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        pip install -r requirements-dev.txt
        
    - name: Start MediaMTX service
      run: |
        mediamtx &
        sleep 5
        
    - name: Run IVV tests (NO MOCKS)
      env:
        FORBID_MOCKS: 1
        MEDIAMTX_HOST: localhost
        MEDIAMTX_API_PORT: 9997
      run: |
        timeout 240 python -m pytest tests/ivv/ -v --tb=short -s --timeout=60
        
    - name: Collect IVV artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: ivv-test-results
        path: |
          test-results/
          *.log

  # Job 6: Security Tests
  security-tests:
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 15
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        pip install -r requirements-dev.txt
        
    - name: Run security tests
      run: |
        python -m pytest tests/security/ -v --tb=short -s --timeout=60
        
    - name: Collect security artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-test-results
        path: |
          test-results/
          *.log

  # Job 7: Performance Sanity Tests
  performance-sanity:
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 10
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        pip install -r requirements-dev.txt
        
    - name: Start MediaMTX service
      run: |
        mediamtx &
        sleep 5
        
    - name: Run performance sanity tests
      env:
        FORBID_MOCKS: 1
        MEDIAMTX_HOST: localhost
        MEDIAMTX_API_PORT: 9997
      run: |
        timeout 120 python -m pytest tests/performance/ -m "sanity" -v --tb=short -s --timeout=60
        
    - name: Collect performance artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: performance-test-results
        path: |
          test-results/
          performance_*.json
          *.log

  # Job 8: PDR Gate Validation
  pdr-gate:
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, pdr-integration, ivv-tests, security-tests, performance-sanity]
    if: always()
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all test artifacts
      uses: actions/download-artifact@v3
      
    - name: Generate PDR Gate Report
      run: |
        echo "=== PDR CI Gate Validation Report ===" > pdr-gate-report.txt
        echo "Date: $(date)" >> pdr-gate-report.txt
        echo "Commit: ${{ github.sha }}" >> pdr-gate-report.txt
        echo "" >> pdr-gate-report.txt
        
        echo "=== Job Results ===" >> pdr-gate-report.txt
        echo "Code Quality: ${{ needs.code-quality.result }}" >> pdr-gate-report.txt
        echo "Unit Tests: ${{ needs.unit-tests.result }}" >> pdr-gate-report.txt
        echo "PDR Integration: ${{ needs.pdr-integration.result }}" >> pdr-gate-report.txt
        echo "IVV Tests: ${{ needs.ivv-tests.result }}" >> pdr-gate-report.txt
        echo "Security Tests: ${{ needs.security-tests.result }}" >> pdr-gate-report.txt
        echo "Performance Sanity: ${{ needs.performance-sanity.result }}" >> pdr-gate-report.txt
        
        echo "" >> pdr-gate-report.txt
        echo "=== PDR Gate Decision ===" >> pdr-gate-report.txt
        
        # Determine overall result
        if [[ "${{ needs.code-quality.result }}" == "success" && \
              "${{ needs.unit-tests.result }}" == "success" && \
              "${{ needs.pdr-integration.result }}" == "success" && \
              "${{ needs.ivv-tests.result }}" == "success" && \
              "${{ needs.security-tests.result }}" == "success" && \
              "${{ needs.performance-sanity.result }}" == "success" ]]; then
          echo "PDR GATE: PASSED - All criteria met" >> pdr-gate-report.txt
          echo "Status: Ready for Phase 2 development" >> pdr-gate-report.txt
        else
          echo "PDR GATE: FAILED - One or more criteria not met" >> pdr-gate-report.txt
          echo "Status: Requires fixes before Phase 2" >> pdr-gate-report.txt
        fi
        
    - name: Upload PDR Gate Report
      uses: actions/upload-artifact@v3
      with:
        name: pdr-gate-report
        path: pdr-gate-report.txt
        
    - name: PDR Gate Decision
      if: always()
      run: |
        if [[ "${{ needs.code-quality.result }}" == "success" && \
              "${{ needs.unit-tests.result }}" == "success" && \
              "${{ needs.pdr-integration.result }}" == "success" && \
              "${{ needs.ivv-tests.result }}" == "success" && \
              "${{ needs.security-tests.result }}" == "success" && \
              "${{ needs.performance-sanity.result }}" == "success" ]]; then
          echo "✅ PDR GATE PASSED - Ready for Phase 2"
          exit 0
        else
          echo "❌ PDR GATE FAILED - Fixes required"
          exit 1
        fi
