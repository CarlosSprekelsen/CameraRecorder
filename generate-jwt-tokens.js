#!/usr/bin/env node

// JWT Token Generation Script for MediaMTX Camera Service
// Generates proper JWT tokens that the server's authenticate method expects

const jwt = require('jsonwebtoken');
const fs = require('fs');
const path = require('path');

// JWT Configuration (from server config)
const JWT_SECRET = 'edge-device-secret-key-change-in-production';
const JWT_EXPIRY_HOURS = 48;

// Generate JWT token for a role
function generateJWTToken(userId, role, expiryHours = JWT_EXPIRY_HOURS) {
  const now = Math.floor(Date.now() / 1000);
  const exp = now + (expiryHours * 3600);
  
  const payload = {
    user_id: userId,
    role: role,
    iat: now,
    exp: exp
  };
  
  return jwt.sign(payload, JWT_SECRET, { algorithm: 'HS256' });
}

// Generate all tokens
function generateAllTokens() {
  console.log('ðŸ”‘ Generating JWT tokens for MediaMTX Camera Service...');
  
  const viewerToken = generateJWTToken('test_viewer', 'viewer');
  const operatorToken = generateJWTToken('test_operator', 'operator');
  const adminToken = generateJWTToken('test_admin', 'admin');
  
  const tokens = {
    tokens: {
      viewer: {
        token: viewerToken,
        user_id: 'test_viewer',
        role: 'viewer',
        expires_in_hours: JWT_EXPIRY_HOURS
      },
      operator: {
        token: operatorToken,
        user_id: 'test_operator',
        role: 'operator',
        expires_in_hours: JWT_EXPIRY_HOURS
      },
      admin: {
        token: adminToken,
        user_id: 'test_admin',
        role: 'admin',
        expires_in_hours: JWT_EXPIRY_HOURS
      }
    },
    generated_at: new Date().toISOString(),
    jwt_secret: JWT_SECRET,
    algorithm: 'HS256'
  };
  
  // Create directories
  const tokensDir = path.join(__dirname, 'mediamtx-camera-service-go', 'config', 'test', 'jwt-tokens');
  const clientDir = path.join(__dirname, 'MediaMTX-Camera-Service-Client', 'client');
  const clientFixturesDir = path.join(clientDir, 'tests', 'fixtures');
  
  // Ensure directories exist
  if (!fs.existsSync(tokensDir)) {
    fs.mkdirSync(tokensDir, { recursive: true });
  }
  if (!fs.existsSync(clientFixturesDir)) {
    fs.mkdirSync(clientFixturesDir, { recursive: true });
  }
  
  // Save tokens JSON
  const tokensFile = path.join(tokensDir, 'jwt-tokens.json');
  fs.writeFileSync(tokensFile, JSON.stringify(tokens, null, 2));
  console.log('âœ… JWT tokens saved to:', tokensFile);
  
  // Save environment file
  const envFile = path.join(tokensDir, 'jwt-tokens.env');
  const envContent = `# JWT Tokens Environment Variables
# Generated by generate-jwt-tokens.js

export JWT_SECRET="${JWT_SECRET}"
export TEST_VIEWER_TOKEN="${viewerToken}"
export TEST_OPERATOR_TOKEN="${operatorToken}"
export TEST_ADMIN_TOKEN="${adminToken}"
`;
  fs.writeFileSync(envFile, envContent);
  console.log('âœ… Environment file saved to:', envFile);
  
  // Update client .test_env
  const clientEnvFile = path.join(clientDir, '.test_env');
  const clientEnvContent = `# Test Environment Configuration for MediaMTX Camera Service Client
# Generated by generate-jwt-tokens.js

# JWT Configuration
export CAMERA_SERVICE_JWT_SECRET="${JWT_SECRET}"

# JWT Tokens (for authentication)
export TEST_VIEWER_TOKEN="${viewerToken}"
export TEST_OPERATOR_TOKEN="${operatorToken}"
export TEST_ADMIN_TOKEN="${adminToken}"

# Legacy API Keys (use JWT tokens instead)
export TEST_VIEWER_KEY="${viewerToken}"
export TEST_OPERATOR_KEY="${operatorToken}"
export TEST_ADMIN_KEY="${adminToken}"

# Server Configuration
export CAMERA_SERVICE_HOST=localhost
export CAMERA_SERVICE_PORT=8002
export CAMERA_SERVICE_WS_PATH=/ws
export CAMERA_SERVICE_HEALTH_PORT=8003
export CAMERA_SERVICE_HEALTH_PATH=/health
`;
  fs.writeFileSync(clientEnvFile, clientEnvContent);
  console.log('âœ… Client environment updated:', clientEnvFile);
  
  // Copy to client fixtures
  const clientTokensFile = path.join(clientFixturesDir, 'jwt-tokens.json');
  fs.writeFileSync(clientTokensFile, JSON.stringify(tokens, null, 2));
  console.log('âœ… Client fixtures updated:', clientTokensFile);
  
  console.log('');
  console.log('ðŸŽ‰ JWT token generation completed successfully!');
  console.log('');
  console.log('Generated tokens:');
  console.log(`  Viewer:  ${viewerToken.substring(0, 50)}...`);
  console.log(`  Operator: ${operatorToken.substring(0, 50)}...`);
  console.log(`  Admin:   ${adminToken.substring(0, 50)}...`);
  console.log('');
  console.log('Next steps:');
  console.log('  1. Test authentication: cd MediaMTX-Camera-Service-Client/client && source .test_env');
  console.log('  2. Run integration tests: npm run test:integration -- --testPathPattern="authenticated_functionality"');
}

// Run the generation
generateAllTokens();
