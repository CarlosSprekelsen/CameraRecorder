#!/bin/bash

# Client Test Keys Setup Script
# Sets up test API keys for client development and testing

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CLIENT_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"
SERVER_KEYS_DIR="$(cd "$CLIENT_DIR/../../mediamtx-camera-service-go/config/test/api-keys" && pwd)"
FIXTURES_DIR="$CLIENT_DIR/tests/fixtures"

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if server test keys exist
check_server_keys() {
    local server_keys="$SERVER_KEYS_DIR/test-keys.json"
    local server_env="$SERVER_KEYS_DIR/test-keys.env"
    
    if [ ! -f "$server_keys" ]; then
        log_error "Server test keys not found: $server_keys"
        log_info "Generate server test keys first:"
        log_info "  cd ../../mediamtx-camera-service-go"
        log_info "  ./deployment/scripts/manage-api-keys.sh generate test"
        exit 1
    fi
    
    log_success "Server test keys found"
}

# Copy server keys to client
copy_server_keys() {
    log_info "Copying server test keys to client..."
    
    local server_keys="$SERVER_KEYS_DIR/test-keys.json"
    local client_keys="$FIXTURES_DIR/test_api_keys.json"
    
    # Ensure fixtures directory exists
    mkdir -p "$FIXTURES_DIR"
    
    # Copy keys
    cp "$server_keys" "$client_keys"
    log_success "API keys copied to: $client_keys"
}

# Update client test environment
update_test_env() {
    log_info "Updating client test environment..."
    
    local server_env="$SERVER_KEYS_DIR/test-keys.env"
    local client_env="$CLIENT_DIR/.test_env"
    
    if [ ! -f "$server_env" ]; then
        log_warning "Server environment file not found: $server_env"
        return
    fi
    
    # Extract keys from server environment
    if command -v jq >/dev/null 2>&1; then
        local client_keys="$FIXTURES_DIR/test_api_keys.json"
        viewer_key=$(jq -r '.keys | to_entries[] | select(.value.role == "viewer") | .value.key' "$client_keys")
        operator_key=$(jq -r '.keys | to_entries[] | select(.value.role == "operator") | .value.key' "$client_keys")
        admin_key=$(jq -r '.keys | to_entries[] | select(.value.role == "admin") | .value.key' "$client_keys")
        
        # Update or create .test_env
        cat > "$client_env" << EOF
# Test Environment Configuration for MediaMTX Camera Service Client
# Generated by setup-test-keys.sh

# JWT Configuration
export CAMERA_SERVICE_JWT_SECRET=_Z2EHJ2T8XNIi3eLoTppa602kGMDUlN5eD-akFTp6SI

# API Keys (from server test keys)
export TEST_VIEWER_KEY="$viewer_key"
export TEST_OPERATOR_KEY="$operator_key"
export TEST_ADMIN_KEY="$admin_key"

# Server Configuration
export CAMERA_SERVICE_HOST=localhost
export CAMERA_SERVICE_PORT=8002
export CAMERA_SERVICE_WS_PATH=/ws
export CAMERA_SERVICE_HEALTH_PORT=8003
export CAMERA_SERVICE_HEALTH_PATH=/health
EOF
        
        log_success "Client test environment updated: $client_env"
    else
        log_warning "jq not available, cannot update test environment"
    fi
}

# Install dependencies if needed
install_dependencies() {
    log_info "Checking client dependencies..."
    
    if [ ! -d "$CLIENT_DIR/node_modules" ]; then
        log_info "Installing client dependencies..."
        cd "$CLIENT_DIR"
        npm install
        cd "$SCRIPT_DIR"
        log_success "Client dependencies installed"
    else
        log_success "Client dependencies already installed"
    fi
}

# Run client tests
run_tests() {
    log_info "Running client integration tests..."
    
    cd "$CLIENT_DIR"
    source .test_env
    
    # Run basic connectivity test first
    log_info "Testing basic connectivity..."
    npm run test:integration -- --testPathPattern="basic_connectivity" --maxWorkers=1
    
    # Run ping test
    log_info "Testing ping functionality..."
    npm run test:integration -- --testPathPattern="ping_api" --maxWorkers=1
    
    log_success "Client tests completed successfully"
}

# Main execution
main() {
    log_info "Setting up client test keys..."
    
    # Check server keys
    check_server_keys
    
    # Copy keys to client
    copy_server_keys
    
    # Update test environment
    update_test_env
    
    # Install dependencies
    install_dependencies
    
    # Run tests
    run_tests
    
    log_success "Client test setup completed!"
    echo ""
    log_info "Next steps:"
    log_info "  1. Install server keys: cd ../../mediamtx-camera-service-go && ./deployment/scripts/manage-api-keys.sh install test"
    log_info "  2. Restart server: sudo systemctl restart camera-service"
    log_info "  3. Test authentication: npm run test:integration -- --testPathPattern=\"authenticated_functionality\""
}

# Run main function
main "$@"
