{"dependencies": [{"name": "annotated-types", "version": "0.7.0", "vulns": []}, {"name": "anyio", "version": "4.9.0", "vulns": []}, {"name": "arrow", "version": "1.3.0", "vulns": []}, {"name": "asttokens", "version": "3.0.0", "vulns": []}, {"name": "attrs", "version": "25.3.0", "vulns": []}, {"name": "automat", "version": "20.2.0", "vulns": []}, {"name": "babel", "version": "2.17.0", "vulns": []}, {"name": "backports-asyncio-runner", "version": "1.2.0", "vulns": []}, {"name": "backrefs", "version": "5.9", "vulns": []}, {"name": "bandit", "version": "1.8.6", "vulns": []}, {"name": "bcrypt", "version": "3.2.0", "vulns": []}, {"name": "black", "version": "25.1.0", "vulns": []}, {"name": "blinker", "version": "1.4", "vulns": []}, {"name": "boolean-py", "version": "5.0", "vulns": []}, {"name": "cachecontrol", "version": "0.14.3", "vulns": []}, {"name": "cachetools", "version": "6.1.0", "vulns": []}, {"name": "certifi", "version": "2020.6.20", "vulns": [{"id": "PYSEC-2022-42986", "fix_versions": ["2022.12.7"], "aliases": ["CVE-2022-23491", "GHSA-43fp-rhv2-5gv8"], "description": "Certifi is a curated collection of Root Certificates for validating the trustworthiness of SSL certificates while verifying the identity of TLS hosts. Certifi 2022.12.07 removes root certificates from \"TrustCor\" from the root store. These are in the process of being removed from Mozilla's trust store. TrustCor's root certificates are being removed pursuant to an investigation prompted by media reporting that TrustCor's ownership also operated a business that produced spyware. Conclusions of Mozilla's investigation can be found in the linked google group discussion."}, {"id": "PYSEC-2023-135", "fix_versions": ["2023.7.22"], "aliases": ["CVE-2023-37920", "GHSA-xqr8-7jwr-rhp7"], "description": "Certifi 2023.07.22 removes root certificates from \"e-Tugra\" from the root store. These are in the process of being removed from Mozilla's trust store. e-Tugra's root certificates are being removed pursuant to an investigation prompted by reporting of security issues in their systems."}]}, {"name": "cfgv", "version": "3.4.0", "vulns": []}, {"name": "chardet", "version": "5.2.0", "vulns": []}, {"name": "charset-normalizer", "version": "3.4.2", "vulns": []}, {"name": "click", "version": "8.0.3", "vulns": []}, {"name": "cloud-init", "skip_reason": "Dependency not found on PyPI and could not be audited: cloud-init (25.1.4)"}, {"name": "colorama", "version": "0.4.6", "vulns": []}, {"name": "command-not-found", "skip_reason": "Dependency not found on PyPI and could not be audited: command-not-found (0.3)"}, {"name": "configobj", "version": "5.0.6", "vulns": [{"id": "GHSA-c33w-24p9-8m24", "fix_versions": ["5.0.9"], "aliases": ["CVE-2023-26112"], "description": "All versions of the package configobj are vulnerable to Regular Expression Denial of Service (ReDoS) via the validate function, using (.+?)\\((.*)\\). **Note:** This is only exploitable in the case of a developer, putting the offending value in a server side configuration file."}]}, {"name": "constantly", "version": "15.1.0", "vulns": []}, {"name": "coverage", "version": "7.10.2", "vulns": []}, {"name": "cryptography", "version": "3.4.8", "vulns": [{"id": "PYSEC-2023-254", "fix_versions": ["41.0.6"], "aliases": ["GHSA-jfhm-5ghh-2f97", "CVE-2023-49083"], "description": "cryptography is a package designed to expose cryptographic primitives and recipes to Python developers. Calling `load_pem_pkcs7_certificates` or `load_der_pkcs7_certificates` could lead to a NULL-pointer dereference and segfault. Exploitation of this vulnerability poses a serious risk of Denial of Service (DoS) for any application attempting to deserialize a PKCS7 blob/certificate. The consequences extend to potential disruptions in system availability and stability. This vulnerability has been patched in version 41.0.6."}, {"id": "GHSA-w7pp-m8wf-vj6r", "fix_versions": ["39.0.1"], "aliases": ["CVE-2023-23931"], "description": "Previously, `Cipher.update_into` would accept Python objects which implement the buffer protocol, but provide only immutable buffers:  ```pycon >>> outbuf = b\"\\x00\" * 32 >>> c = ciphers.Cipher(AES(b\"\\x00\" * 32), modes.ECB()).encryptor() >>> c.update_into(b\"\\x00\" * 16, outbuf) 16 >>> outbuf b'\\xdc\\x95\\xc0x\\xa2@\\x89\\x89\\xadH\\xa2\\x14\\x92\\x84 \\x87\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00' ```  This would allow immutable objects (such as `bytes`) to be mutated, thus violating fundamental rules of Python. This is a soundness bug -- it allows programmers to misuse an API, it cannot be exploited by attacker controlled data alone.  This now correctly raises an exception.  This issue has been present since `update_into` was originally introduced in cryptography 1.8."}, {"id": "GHSA-x4qr-2fvf-3mr5", "fix_versions": ["39.0.1"], "aliases": ["CVE-2023-0286"], "description": "pyca/cryptography's wheels include a statically linked copy of OpenSSL. The versions of OpenSSL included in cryptography 0.8.1-39.0.0  are vulnerable to a security issue. More details about the vulnerabilities themselves can be found in https://www.openssl.org/news/secadv/20221213.txt and https://www.openssl.org/news/secadv/20230207.txt.  If you are building cryptography source (\"sdist\") then you are responsible for upgrading your copy of OpenSSL. Only users installing from wheels built by the cryptography project (i.e., those distributed on PyPI) need to update their cryptography versions."}, {"id": "GHSA-5cpq-8wj7-hf2v", "fix_versions": ["41.0.0"], "aliases": [], "description": "pyca/cryptography's wheels include a statically linked copy of OpenSSL. The versions of OpenSSL included in cryptography 0.5-40.0.2 are vulnerable to a security issue. More details about the vulnerability itself can be found in https://www.openssl.org/news/secadv/20230530.txt.  If you are building cryptography source (\"sdist\") then you are responsible for upgrading your copy of OpenSSL. Only users installing from wheels built by the cryptography project (i.e., those distributed on PyPI) need to update their cryptography versions."}, {"id": "GHSA-jm77-qphf-c4w8", "fix_versions": ["41.0.3"], "aliases": [], "description": "pyca/cryptography's wheels include a statically linked copy of OpenSSL. The versions of OpenSSL included in cryptography 0.8-41.0.2 are vulnerable to several security issues. More details about the vulnerabilities themselves can be found in https://www.openssl.org/news/secadv/20230731.txt, https://www.openssl.org/news/secadv/20230719.txt, and https://www.openssl.org/news/secadv/20230714.txt.  If you are building cryptography source (\"sdist\") then you are responsible for upgrading your copy of OpenSSL. Only users installing from wheels built by the cryptography project (i.e., those distributed on PyPI) need to update their cryptography versions."}, {"id": "GHSA-3ww4-gg4f-jr7f", "fix_versions": ["42.0.0"], "aliases": ["CVE-2023-50782"], "description": "A flaw was found in the python-cryptography package. This issue may allow a remote attacker to decrypt captured messages in TLS servers that use RSA key exchanges, which may lead to exposure of confidential or sensitive data."}, {"id": "GHSA-v8gr-m533-ghj9", "fix_versions": ["41.0.4"], "aliases": [], "description": "pyca/cryptography's wheels include a statically linked copy of OpenSSL. The versions of OpenSSL included in cryptography 2.5-41.0.3 are vulnerable to several security issues. More details about the vulnerabilities themselves can be found in https://www.openssl.org/news/secadv/20230908.txt.  If you are building cryptography source (\"sdist\") then you are responsible for upgrading your copy of OpenSSL. Only users installing from wheels built by the cryptography project (i.e., those distributed on PyPI) need to update their cryptography versions."}, {"id": "GHSA-9v9h-cgj8-h64p", "fix_versions": ["42.0.2"], "aliases": ["CVE-2024-0727"], "description": "Issue summary: Processing a maliciously formatted PKCS12 file may lead OpenSSL to crash leading to a potential Denial of Service attack  Impact summary: Applications loading files in the PKCS12 format from untrusted sources might terminate abruptly.  A file in PKCS12 format can contain certificates and keys and may come from an untrusted source. The PKCS12 specification allows certain fields to be NULL, but OpenSSL does not correctly check for this case. This can lead to a NULL pointer dereference that results in OpenSSL crashing. If an application processes PKCS12 files from an untrusted source using the OpenSSL APIs then that application will be vulnerable to this issue.  OpenSSL APIs that are vulnerable to this are: PKCS12_parse(), PKCS12_unpack_p7data(), PKCS12_unpack_p7encdata(), PKCS12_unpack_authsafes() and PKCS12_newpass().  We have also fixed a similar issue in SMIME_write_PKCS7(). However since this function is related to writing data we do not consider it security significant.  The FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue."}]}, {"name": "cyclonedx-bom", "version": "7.0.0", "vulns": []}, {"name": "cyclonedx-python-lib", "version": "9.1.0", "vulns": []}, {"name": "dbus-python", "version": "1.2.18", "vulns": []}, {"name": "decorator", "version": "5.2.1", "vulns": []}, {"name": "defusedxml", "version": "0.7.1", "vulns": []}, {"name": "distlib", "version": "0.4.0", "vulns": []}, {"name": "distro", "version": "1.7.0", "vulns": []}, {"name": "distro-info", "skip_reason": "Dependency not found on PyPI and could not be audited: distro-info (1.1+ubuntu0.2)"}, {"name": "exceptiongroup", "version": "1.3.0", "vulns": []}, {"name": "executing", "version": "2.2.0", "vulns": []}, {"name": "fancycompleter", "version": "0.11.1", "vulns": []}, {"name": "fastapi", "version": "0.116.1", "vulns": []}, {"name": "filelock", "version": "3.18.0", "vulns": []}, {"name": "flake8", "version": "7.3.0", "vulns": []}, {"name": "fqdn", "version": "1.5.1", "vulns": []}, {"name": "ghp-import", "version": "2.1.0", "vulns": []}, {"name": "h11", "version": "0.16.0", "vulns": []}, {"name": "httplib2", "version": "0.20.2", "vulns": []}, {"name": "hyperlink", "version": "21.0.0", "vulns": []}, {"name": "identify", "version": "2.6.12", "vulns": []}, {"name": "idna", "version": "3.3", "vulns": [{"id": "PYSEC-2024-60", "fix_versions": ["3.7"], "aliases": ["CVE-2024-3651"], "description": "A vulnerability was identified in the kjd/idna library, specifically within the `idna.encode()` function, affecting version 3.6. The issue arises from the function's handling of crafted input strings, which can lead to quadratic complexity and consequently, a denial of service condition. This vulnerability is triggered by a crafted input that causes the `idna.encode()` function to process the input with considerable computational load, significantly increasing the processing time in a quadratic manner relative to the input size."}]}, {"name": "importlib-metadata", "version": "4.6.4", "vulns": []}, {"name": "incremental", "version": "21.3.0", "vulns": []}, {"name": "iniconfig", "version": "2.1.0", "vulns": []}, {"name": "ipython", "version": "8.37.0", "vulns": []}, {"name": "isoduration", "version": "20.11.0", "vulns": []}, {"name": "jedi", "version": "0.19.2", "vulns": []}, {"name": "jeepney", "version": "0.7.1", "vulns": []}, {"name": "jinja2", "version": "3.1.6", "vulns": []}, {"name": "jsonpatch", "version": "1.32", "vulns": []}, {"name": "jsonpointer", "version": "2.0", "vulns": []}, {"name": "jsonschema", "version": "4.25.0", "vulns": []}, {"name": "jsonschema-specifications", "version": "2025.4.1", "vulns": []}, {"name": "keyring", "version": "23.5.0", "vulns": []}, {"name": "launchpadlib", "version": "1.10.16", "vulns": []}, {"name": "lazr-restfulclient", "version": "0.14.4", "vulns": []}, {"name": "lazr-uri", "version": "1.0.6", "vulns": []}, {"name": "license-expression", "version": "30.4.4", "vulns": []}, {"name": "lxml", "version": "5.4.0", "vulns": []}, {"name": "markdown", "version": "3.8.2", "vulns": []}, {"name": "markdown-it-py", "version": "3.0.0", "vulns": []}, {"name": "markupsafe", "version": "2.0.1", "vulns": []}, {"name": "matplotlib-inline", "version": "0.1.7", "vulns": []}, {"name": "mccabe", "version": "0.7.0", "vulns": []}, {"name": "mdurl", "version": "0.1.2", "vulns": []}, {"name": "mergedeep", "version": "1.3.4", "vulns": []}, {"name": "mkdocs", "version": "1.6.1", "vulns": []}, {"name": "mkdocs-get-deps", "version": "0.2.0", "vulns": []}, {"name": "mkdocs-material", "version": "9.6.16", "vulns": []}, {"name": "mkdocs-material-extensions", "version": "1.3.1", "vulns": []}, {"name": "more-itertools", "version": "8.10.0", "vulns": []}, {"name": "msgpack", "version": "1.1.1", "vulns": []}, {"name": "mypy", "version": "1.17.1", "vulns": []}, {"name": "mypy-extensions", "version": "1.1.0", "vulns": []}, {"name": "netifaces", "version": "0.11.0", "vulns": []}, {"name": "nodeenv", "version": "1.9.1", "vulns": []}, {"name": "oauthlib", "version": "3.2.0", "vulns": [{"id": "PYSEC-2022-269", "fix_versions": ["3.2.1"], "aliases": ["CVE-2022-36087", "GHSA-3pgj-pg6c-r5p7"], "description": "OAuthLib is an implementation of the OAuth request-signing logic for Python 3.6+. In OAuthLib versions 3.1.1 until 3.2.1, an attacker providing malicious redirect uri can cause denial of service. An attacker can also leverage usage of `uri_validate` functions depending where it is used. OAuthLib applications using OAuth2.0 provider support or use directly `uri_validate` are affected by this issue. Version 3.2.1 contains a patch. There are no known workarounds."}]}, {"name": "packageurl-python", "version": "0.17.5", "vulns": []}, {"name": "packaging", "version": "25.0", "vulns": []}, {"name": "paginate", "version": "0.5.7", "vulns": []}, {"name": "parso", "version": "0.8.4", "vulns": []}, {"name": "pathspec", "version": "0.12.1", "vulns": []}, {"name": "pbr", "version": "6.1.1", "vulns": []}, {"name": "pdbpp", "version": "0.11.7", "vulns": []}, {"name": "pexpect", "version": "4.8.0", "vulns": []}, {"name": "pip", "version": "22.0.2", "vulns": [{"id": "PYSEC-2023-228", "fix_versions": ["23.3"], "aliases": ["CVE-2023-5752"], "description": "When installing a package from a Mercurial VCS URL  (ie \"pip install  hg+...\") with pip prior to v23.3, the specified Mercurial revision could  be used to inject arbitrary configuration options to the \"hg clone\"  call (ie \"--config\"). Controlling the Mercurial configuration can modify  how and which repository is installed. This vulnerability does not  affect users who aren't installing from Mercurial. "}]}, {"name": "pip-api", "version": "0.0.34", "vulns": []}, {"name": "pip-audit", "version": "2.9.0", "vulns": []}, {"name": "pip-requirements-parser", "version": "32.0.1", "vulns": []}, {"name": "platformdirs", "version": "4.3.8", "vulns": []}, {"name": "pluggy", "version": "1.6.0", "vulns": []}, {"name": "pre-commit", "version": "4.2.0", "vulns": []}, {"name": "prompt-toolkit", "version": "3.0.51", "vulns": []}, {"name": "ptyprocess", "version": "0.7.0", "vulns": []}, {"name": "pure-eval", "version": "0.2.3", "vulns": []}, {"name": "py-serializable", "version": "2.1.0", "vulns": []}, {"name": "pyasn1", "version": "0.4.8", "vulns": []}, {"name": "pyasn1-modules", "version": "0.2.1", "vulns": []}, {"name": "pycodestyle", "version": "2.14.0", "vulns": []}, {"name": "pydantic", "version": "2.11.7", "vulns": []}, {"name": "pydantic-core", "version": "2.33.2", "vulns": []}, {"name": "pyflakes", "version": "3.4.0", "vulns": []}, {"name": "pygments", "version": "2.19.2", "vulns": []}, {"name": "pygobject", "version": "3.42.1", "vulns": []}, {"name": "pyhamcrest", "version": "2.0.2", "vulns": []}, {"name": "pyjwt", "version": "2.3.0", "vulns": [{"id": "PYSEC-2022-202", "fix_versions": ["2.4.0"], "aliases": ["CVE-2022-29217", "GHSA-ffqj-6fqr-9h24"], "description": "PyJWT is a Python implementation of RFC 7519. PyJWT supports multiple different JWT signing algorithms. With JWT, an attacker submitting the JWT token can choose the used signing algorithm. The PyJWT library requires that the application chooses what algorithms are supported. The application can specify `jwt.algorithms.get_default_algorithms()` to get support for all algorithms, or specify a single algorithm. The issue is not that big as `algorithms=jwt.algorithms.get_default_algorithms()` has to be used. Users should upgrade to v2.4.0 to receive a patch for this issue. As a workaround, always be explicit with the algorithms that are accepted and expected when decoding."}]}, {"name": "pymdown-extensions", "version": "10.16.1", "vulns": []}, {"name": "pyopenssl", "version": "21.0.0", "vulns": []}, {"name": "pyparsing", "version": "2.4.7", "vulns": []}, {"name": "pyproject-api", "version": "1.9.1", "vulns": []}, {"name": "pyrepl", "version": "0.11.4", "vulns": []}, {"name": "pyrsistent", "version": "0.18.1", "vulns": []}, {"name": "pyserial", "version": "3.5", "vulns": []}, {"name": "pytest", "version": "8.4.1", "vulns": []}, {"name": "pytest-asyncio", "version": "1.1.0", "vulns": []}, {"name": "pytest-cov", "version": "6.2.1", "vulns": []}, {"name": "python-apt", "skip_reason": "Dependency not found on PyPI and could not be audited: python-apt (2.4.0+ubuntu4)"}, {"name": "python-dateutil", "version": "2.9.0.post0", "vulns": []}, {"name": "python-debian", "skip_reason": "Dependency not found on PyPI and could not be audited: python-debian (0.1.43+ubuntu1.1)"}, {"name": "python-magic", "version": "0.4.24", "vulns": []}, {"name": "pytz", "version": "2022.1", "vulns": []}, {"name": "pyyaml", "version": "5.4.1", "vulns": []}, {"name": "pyyaml-env-tag", "version": "1.1", "vulns": []}, {"name": "referencing", "version": "0.36.2", "vulns": []}, {"name": "requests", "version": "2.32.4", "vulns": []}, {"name": "rfc3339-validator", "version": "0.1.4", "vulns": []}, {"name": "rfc3987", "version": "1.3.8", "vulns": []}, {"name": "rich", "version": "14.1.0", "vulns": []}, {"name": "rpds-py", "version": "0.26.0", "vulns": []}, {"name": "ruff", "version": "0.12.8", "vulns": []}, {"name": "secretstorage", "version": "3.3.1", "vulns": []}, {"name": "service-identity", "version": "18.1.0", "vulns": []}, {"name": "setuptools", "version": "59.6.0", "vulns": [{"id": "PYSEC-2022-43012", "fix_versions": ["65.5.1"], "aliases": ["CVE-2022-40897"], "description": "Python Packaging Authority (PyPA) setuptools before 65.5.1 allows remote attackers to cause a denial of service via HTML in a crafted package or custom PackageIndex page. There is a Regular Expression Denial of Service (ReDoS) in package_index.py."}, {"id": "PYSEC-2025-49", "fix_versions": ["78.1.1"], "aliases": ["GHSA-5rjg-fvgr-3xxf", "CVE-2025-47273"], "description": "setuptools is a package that allows users to download, build, install, upgrade, and uninstall Python packages. A path traversal vulnerability in `PackageIndex` is present in setuptools prior to version 78.1.1. An attacker would be allowed to write files to arbitrary locations on the filesystem with the permissions of the process running the Python code, which could escalate to remote code execution depending on the context. Version 78.1.1 fixes the issue."}]}, {"name": "six", "version": "1.16.0", "vulns": []}, {"name": "sniffio", "version": "1.3.1", "vulns": []}, {"name": "sortedcontainers", "version": "2.4.0", "vulns": []}, {"name": "sos", "skip_reason": "Dependency not found on PyPI and could not be audited: sos (4.8.2)"}, {"name": "ssh-import-id", "version": "5.11", "vulns": []}, {"name": "stack-data", "version": "0.6.3", "vulns": []}, {"name": "starlette", "version": "0.47.2", "vulns": []}, {"name": "stevedore", "version": "5.4.1", "vulns": []}, {"name": "systemd-python", "version": "234", "vulns": []}, {"name": "toml", "version": "0.10.2", "vulns": []}, {"name": "tomli", "version": "2.2.1", "vulns": []}, {"name": "tox", "version": "4.28.4", "vulns": []}, {"name": "traitlets", "version": "5.14.3", "vulns": []}, {"name": "twisted", "version": "22.1.0", "vulns": [{"id": "PYSEC-2022-160", "fix_versions": ["22.2.0"], "aliases": ["GHSA-rv6r-3f5q-9rgx", "CVE-2022-21716"], "description": "Twisted is an event-based framework for internet applications, supporting Python 3.6+. Prior to 22.2.0, Twisted SSH client and server implement is able to accept an infinite amount of data for the peer's SSH version identifier. This ends up with a buffer using all the available memory. The attach is a simple as `nc -rv localhost 22 < /dev/zero`. A patch is available in version 22.2.0. There are currently no known workarounds."}, {"id": "PYSEC-2022-195", "fix_versions": ["22.4.0"], "aliases": ["GHSA-c2jg-hw38-jrqq", "CVE-2022-24801"], "description": "Twisted is an event-based framework for internet applications, supporting Python 3.6+. Prior to version 22.4.0rc1, the Twisted Web HTTP 1.1 server, located in the `twisted.web.http` module, parsed several HTTP request constructs more leniently than permitted by RFC 7230. This non-conformant parsing can lead to desync if requests pass through multiple HTTP parsers, potentially resulting in HTTP request smuggling. Users who may be affected use Twisted Web's HTTP 1.1 server and/or proxy and also pass requests through a different HTTP server and/or proxy. The Twisted Web client is not affected. The HTTP 2.0 server uses a different parser, so it is not affected. The issue has been addressed in Twisted 22.4.0rc1. Two workarounds are available: Ensure any vulnerabilities in upstream proxies have been addressed, such as by upgrading them; or filter malformed requests by other means, such as configuration of an upstream proxy."}, {"id": "PYSEC-2023-224", "fix_versions": ["23.10.0rc1"], "aliases": ["GHSA-xc8x-vp79-p3wm", "CVE-2023-46137"], "description": "Twisted is an event-based framework for internet applications. Prior to version 23.10.0rc1, when sending multiple HTTP requests in one TCP packet, twisted.web will process the requests asynchronously without guaranteeing the response order. If one of the endpoints is controlled by an attacker, the attacker can delay the response on purpose to manipulate the response of the second request when a victim launched two requests using HTTP pipeline. Version 23.10.0rc1 contains a patch for this issue."}, {"id": "PYSEC-2024-75", "fix_versions": ["24.7.0rc1"], "aliases": ["GHSA-cf56-g6w6-pqq2", "CVE-2024-41810"], "description": "Twisted is an event-based framework for internet applications, supporting Python 3.6+. The `twisted.web.util.redirectTo` function contains an HTML injection vulnerability. If application code allows an attacker to control the redirect URL this vulnerability may result in Reflected Cross-Site Scripting (XSS) in the redirect response HTML body. This vulnerability is fixed in 24.7.0rc1."}, {"id": "GHSA-vg46-2rrj-3647", "fix_versions": ["22.10.0rc1"], "aliases": ["CVE-2022-39348"], "description": "When the host header does not match a configured host, `twisted.web.vhost.NameVirtualHost` will return a `NoResource` resource which renders the Host header unescaped into the 404 response allowing HTML and script injection.  Example configuration: ```python from twisted.web.server import Site from twisted.web.vhost import NameVirtualHost from twisted.internet import reactor  resource = NameVirtualHost() site = Site(resource) reactor.listenTCP(8080, site) reactor.run() ``` Output: ``` \u276f curl -H\"Host:<h1>HELLO THERE</h1>\" http://localhost:8080/  <html>   <head><title>404 - No Such Resource</title></head>   <body>     <h1>No Such Resource</h1>     <p>host b'<h1>hello there</h1>' not in vhost map</p>   </body> </html> ```  This vulnerability was introduced in f49041bb67792506d85aeda9cf6157e92f8048f4 and first appeared in the 0.9.4 release."}, {"id": "GHSA-c8m8-j448-xjx7", "fix_versions": ["24.7.0rc1"], "aliases": ["CVE-2024-41671"], "description": "### Summary  The HTTP 1.0 and 1.1 server provided by twisted.web could process pipelined HTTP requests out-of-order, possibly resulting in information disclosure.  ### PoC 0. Start a fresh Debian container: ```sh docker run --workdir /repro --rm -it debian:bookworm-slim ``` 1. Install twisted and its dependencies: ```sh apt -y update && apt -y install ncat git python3 python3-pip \\     && git clone --recurse-submodules https://github.com/twisted/twisted \\     && cd twisted \\     && pip3 install --break-system-packages . ``` 2. Run a twisted.web HTTP server that echos received requests' methods. e.g., the following: ```python from twisted.web import server, resource from twisted.internet import reactor  class TheResource(resource.Resource):     isLeaf = True      def render_GET(self, request) -> bytes:         return b\"GET\"      def render_POST(self, request) -> bytes:         return b\"POST\"  site = server.Site(TheResource()) reactor.listenTCP(80, site) reactor.run() ``` 3. Send it a POST request with a chunked message body, pipelined with another POST request, wait a second, then send a GET request on the same connection: ```sh (printf 'POST / HTTP/1.1\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n0\\r\\n\\r\\nPOST / HTTP/1.1\\r\\nContent-Length: 0\\r\\n\\r\\n'; sleep 1; printf 'GET / HTTP/1.1\\r\\n\\r\\n'; sleep 1) | nc localhost 80 ``` 4. Observe that the responses arrive out of order: ``` HTTP/1.1 200 OK Server: TwistedWeb/24.3.0.post0 Date: Tue, 09 Jul 2024 06:19:41 GMT Content-Length: 5 Content-Type: text/html  POST HTTP/1.1 200 OK Server: TwistedWeb/24.3.0.post0 Date: Tue, 09 Jul 2024 06:19:42 GMT Content-Length: 4 Content-Type: text/html  GET HTTP/1.1 200 OK Server: TwistedWeb/24.3.0.post0 Date: Tue, 09 Jul 2024 06:19:42 GMT Content-Length: 5 Content-Type: text/html  POST ```  ### Impact See [GHSA-xc8x-vp79-p3wm](https://github.com/twisted/twisted/security/advisories/GHSA-xc8x-vp79-p3wm). Further, for instances of twisted.web HTTP servers deployed behind reverse proxies that implement connection pooling, it may be possible for remote attackers to receive responses intended for other clients of the twisted.web server."}]}, {"name": "types-jsonschema", "version": "4.25.0.20250720", "vulns": []}, {"name": "types-python-dateutil", "version": "2.9.0.20250809", "vulns": []}, {"name": "types-pyyaml", "version": "6.0.12.20250516", "vulns": []}, {"name": "types-setuptools", "version": "80.9.0.20250801", "vulns": []}, {"name": "typing-extensions", "version": "4.14.1", "vulns": []}, {"name": "typing-inspection", "version": "0.4.1", "vulns": []}, {"name": "ubuntu-drivers-common", "skip_reason": "Dependency not found on PyPI and could not be audited: ubuntu-drivers-common (0.0.0)"}, {"name": "ubuntu-pro-client", "skip_reason": "Dependency not found on PyPI and could not be audited: ubuntu-pro-client (8001)"}, {"name": "ufw", "skip_reason": "Dependency not found on PyPI and could not be audited: ufw (0.36.1)"}, {"name": "unattended-upgrades", "skip_reason": "Dependency not found on PyPI and could not be audited: unattended-upgrades (0.1)"}, {"name": "uri-template", "version": "1.3.0", "vulns": []}, {"name": "urllib3", "version": "1.26.5", "vulns": [{"id": "PYSEC-2023-192", "fix_versions": ["1.26.17", "2.0.6"], "aliases": ["CVE-2023-43804", "GHSA-v845-jxx5-vc9f"], "description": "urllib3 is a user-friendly HTTP client library for Python. urllib3 doesn't treat the `Cookie` HTTP header special or provide any helpers for managing cookies over HTTP, that is the responsibility of the user. However, it is possible for a user to specify a `Cookie` header and unknowingly leak information via HTTP redirects to a different origin if that user doesn't disable redirects explicitly. This issue has been patched in urllib3 version 1.26.17 or 2.0.5."}, {"id": "PYSEC-2023-212", "fix_versions": ["1.26.18", "2.0.7"], "aliases": ["GHSA-g4mx-q9vg-27p4", "CVE-2023-45803"], "description": "urllib3 is a user-friendly HTTP client library for Python. urllib3 previously wouldn't remove the HTTP request body when an HTTP redirect response using status 301, 302, or 303 after the request had its method changed from one that could accept a request body (like `POST`) to `GET` as is required by HTTP RFCs. Although this behavior is not specified in the section for redirects, it can be inferred by piecing together information from different sections and we have observed the behavior in other major HTTP client implementations like curl and web browsers. Because the vulnerability requires a previously trusted service to become compromised in order to have an impact on confidentiality we believe the exploitability of this vulnerability is low. Additionally, many users aren't putting sensitive data in HTTP request bodies, if this is the case then this vulnerability isn't exploitable. Both of the following conditions must be true to be affected by this vulnerability: 1. Using urllib3 and submitting sensitive information in the HTTP request body (such as form data or JSON) and 2. The origin service is compromised and starts redirecting using 301, 302, or 303 to a malicious peer or the redirected-to service becomes compromised. This issue has been addressed in versions 1.26.18 and 2.0.7 and users are advised to update to resolve this issue. Users unable to update should disable redirects for services that aren't expecting to respond with redirects with `redirects=False` and disable automatic redirects with `redirects=False` and handle 301, 302, and 303 redirects manually by stripping the HTTP request body. "}, {"id": "GHSA-34jh-p97f-mpxf", "fix_versions": ["1.26.19", "2.2.2"], "aliases": ["CVE-2024-37891"], "description": "When using urllib3's proxy support with `ProxyManager`, the `Proxy-Authorization` header is only sent to the configured proxy, as expected.  However, when sending HTTP requests *without* using urllib3's proxy support, it's possible to accidentally configure the `Proxy-Authorization` header even though it won't have any effect as the request is not using a forwarding proxy or a tunneling proxy. In those cases, urllib3 doesn't treat the `Proxy-Authorization` HTTP header as one carrying authentication material and thus doesn't strip the header on cross-origin redirects.  Because this is a highly unlikely scenario, we believe the severity of this vulnerability is low for almost all users. Out of an abundance of caution urllib3 will automatically strip the `Proxy-Authorization` header during cross-origin redirects to avoid the small chance that users are doing this on accident.  Users should use urllib3's proxy support or disable automatic redirects to achieve safe processing of the `Proxy-Authorization` header, but we still decided to strip the header by default in order to further protect users who aren't using the correct approach.  ## Affected usages  We believe the number of usages affected by this advisory is low. It requires all of the following to be true to be exploited:  * Setting the `Proxy-Authorization` header without using urllib3's built-in proxy support. * Not disabling HTTP redirects. * Either not using an HTTPS origin server or for the proxy or target origin to redirect to a malicious origin.  ## Remediation  * Using the `Proxy-Authorization` header with urllib3's `ProxyManager`. * Disabling HTTP redirects using `redirects=False` when sending requests. * Not using the `Proxy-Authorization` header."}, {"id": "GHSA-pq67-6m6q-mj2v", "fix_versions": ["2.5.0"], "aliases": ["CVE-2025-50181"], "description": "urllib3 handles redirects and retries using the same mechanism, which is controlled by the `Retry` object. The most common way to disable redirects is at the request level, as follows:  ```python resp = urllib3.request(\"GET\", \"https://httpbin.org/redirect/1\", redirect=False) print(resp.status) # 302 ```  However, it is also possible to disable redirects, for all requests, by instantiating a `PoolManager` and specifying `retries` in a way that disable redirects:  ```python import urllib3  http = urllib3.PoolManager(retries=0)  # should raise MaxRetryError on redirect http = urllib3.PoolManager(retries=urllib3.Retry(redirect=0))  # equivalent to the above http = urllib3.PoolManager(retries=False)  # should return the first response  resp = http.request(\"GET\", \"https://httpbin.org/redirect/1\") ```  However, the `retries` parameter is currently ignored, which means all the above examples don't disable redirects.  ## Affected usages  Passing `retries` on `PoolManager` instantiation to disable redirects or restrict their number.  By default, requests and botocore users are not affected.  ## Impact  Redirects are often used to exploit SSRF vulnerabilities. An application attempting to mitigate SSRF or open redirect vulnerabilities by disabling redirects at the PoolManager level will remain vulnerable.  ## Remediation  You can remediate this vulnerability with the following steps:   * Upgrade to a patched version of urllib3. If your organization would benefit from the continued support of urllib3 1.x, please contact [sethmichaellarson@gmail.com](mailto:sethmichaellarson@gmail.com) to discuss sponsorship or contribution opportunities.  * Disable redirects at the `request()` level instead of the `PoolManager()` level."}]}, {"name": "uvicorn", "version": "0.35.0", "vulns": []}, {"name": "virtualenv", "version": "20.33.1", "vulns": []}, {"name": "wadllib", "version": "1.3.6", "vulns": []}, {"name": "watchdog", "version": "6.0.0", "vulns": []}, {"name": "wcwidth", "version": "0.2.13", "vulns": []}, {"name": "webcolors", "version": "24.11.1", "vulns": []}, {"name": "wheel", "version": "0.37.1", "vulns": [{"id": "PYSEC-2022-43017", "fix_versions": ["0.38.1"], "aliases": ["CVE-2022-40898"], "description": "An issue discovered in Python Packaging Authority (PyPA) Wheel 0.37.1 and earlier allows remote attackers to cause a denial of service via attacker controlled input to wheel cli."}]}, {"name": "xkit", "skip_reason": "Dependency not found on PyPI and could not be audited: xkit (0.0.0)"}, {"name": "zipp", "version": "1.0.0", "vulns": []}, {"name": "zope-interface", "version": "5.4.0", "vulns": []}], "fixes": []}
