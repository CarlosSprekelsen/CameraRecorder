#!/bin/bash

# MediaMTX Camera Service - Complete Reinstall with Token Generation
# This script performs a complete reinstall and generates fresh tokens
# Usage: ./reinstall-with-tokens.sh

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SERVER_DIR="$SCRIPT_DIR/mediamtx-camera-service-go"
CLIENT_DIR="$SCRIPT_DIR/MediaMTX-Camera-Service-Client/client"

# Function to log messages
log_message() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')] SUCCESS:${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[$(date '+%Y-%m-%d %H:%M:%S')] WARNING:${NC} $1"
}

log_error() {
    echo -e "${RED}[$(date '+%Y-%m-%d %H:%M:%S')] ERROR:${NC} $1"
}

# Check if running as root
check_root() {
    if [ "$EUID" -ne 0 ]; then
        log_error "This script must be run as root (use sudo)"
        exit 1
    fi
}

# Step 1: Uninstall existing service
uninstall_service() {
    log_message "Step 1: Uninstalling existing service..."
    
    if [ -f "$SERVER_DIR/deployment/scripts/uninstall.sh" ]; then
        cd "$SERVER_DIR"
        sudo ./deployment/scripts/uninstall.sh
        log_success "Service uninstalled"
    else
        log_warning "Uninstall script not found, attempting manual cleanup..."
        
        # Stop service if running
        sudo systemctl stop camera-service 2>/dev/null || true
        sudo systemctl disable camera-service 2>/dev/null || true
        
        # Remove service files
        sudo rm -f /etc/systemd/system/camera-service.service
        sudo rm -rf /opt/camera-service 2>/dev/null || true
        
        log_success "Manual cleanup completed"
    fi
    
    # Reload systemd
    sudo systemctl daemon-reload
}

# Step 2: Install service
install_service() {
    log_message "Step 2: Installing service..."
    
    if [ -f "$SERVER_DIR/deployment/scripts/install.sh" ]; then
        cd "$SERVER_DIR"
        sudo ./deployment/scripts/install.sh
        log_success "Service installed"
    else
        log_error "Install script not found at $SERVER_DIR/deployment/scripts/install.sh"
        exit 1
    fi
}

# Step 3: Generate fresh JWT tokens
generate_tokens() {
    log_message "Step 3: Generating fresh JWT tokens..."
    
    # Check if Node.js is available
    if ! command -v node >/dev/null 2>&1; then
        log_error "Node.js is required for JWT token generation"
        exit 1
    fi
    
    # Check if jsonwebtoken is available in client
    if [ ! -f "$CLIENT_DIR/node_modules/jsonwebtoken/package.json" ]; then
        log_warning "jsonwebtoken not found in client, installing..."
        cd "$CLIENT_DIR"
        npm install jsonwebtoken
    fi
    
    # Generate tokens with 1-year expiry
    cd "$SCRIPT_DIR"
    node -e "
const jwt = require('$CLIENT_DIR/node_modules/jsonwebtoken');
const secret = 'edge-device-secret-key-change-in-production';
const now = Math.floor(Date.now() / 1000);
const exp = now + (365 * 24 * 3600); // 1 YEAR

const tokens = {
  viewer: jwt.sign({user_id: 'test_viewer', role: 'viewer', iat: now, exp: exp}, secret, {algorithm: 'HS256'}),
  operator: jwt.sign({user_id: 'test_operator', role: 'operator', iat: now, exp: exp}, secret, {algorithm: 'HS256'}),
  admin: jwt.sign({user_id: 'test_admin', role: 'admin', iat: now, exp: exp}, secret, {algorithm: 'HS256'})
};

console.log('# Test Environment Configuration for MediaMTX Camera Service Client');
console.log('# Generated by reinstall-with-tokens.sh');
console.log('');
console.log('# JWT Configuration');
console.log('export CAMERA_SERVICE_JWT_SECRET=\"edge-device-secret-key-change-in-production\"');
console.log('');
console.log('# JWT Tokens (1 year expiry)');
console.log('export TEST_VIEWER_TOKEN=\"' + tokens.viewer + '\"');
console.log('export TEST_OPERATOR_TOKEN=\"' + tokens.operator + '\"');
console.log('export TEST_ADMIN_TOKEN=\"' + tokens.admin + '\"');
console.log('');
console.log('# Legacy API Keys (use JWT tokens instead)');
console.log('export TEST_VIEWER_KEY=\"' + tokens.viewer + '\"');
console.log('export TEST_OPERATOR_KEY=\"' + tokens.operator + '\"');
console.log('export TEST_ADMIN_KEY=\"' + tokens.admin + '\"');
console.log('');
console.log('# Server Configuration');
console.log('export CAMERA_SERVICE_HOST=localhost');
console.log('export CAMERA_SERVICE_PORT=8002');
console.log('export CAMERA_SERVICE_WS_PATH=/ws');
console.log('export CAMERA_SERVICE_HEALTH_PORT=8003');
console.log('export CAMERA_SERVICE_HEALTH_PATH=/health');
" > "$CLIENT_DIR/.test_env"
    
    log_success "Fresh JWT tokens generated (1 year expiry)"
    log_message "Tokens saved to: $CLIENT_DIR/.test_env"
}

# Step 4: Start service
start_service() {
    log_message "Step 4: Starting service..."
    
    sudo systemctl start camera-service
    sudo systemctl enable camera-service
    
    # Wait for service to start
    sleep 5
    
    # Check service status
    if sudo systemctl is-active --quiet camera-service; then
        log_success "Service started successfully"
    else
        log_error "Service failed to start"
        sudo systemctl status camera-service
        exit 1
    fi
}

# Step 5: Verify installation
verify_installation() {
    log_message "Step 5: Verifying installation..."
    
    # Check health endpoint
    if curl -s http://localhost:8003/health >/dev/null; then
        log_success "Health endpoint responding"
    else
        log_warning "Health endpoint not responding"
    fi
    
    # Check WebSocket endpoint
    if nc -z localhost 8002; then
        log_success "WebSocket endpoint available"
    else
        log_warning "WebSocket endpoint not available"
    fi
    
    log_success "Installation verification completed"
}

# Main execution
main() {
    log_message "Starting MediaMTX Camera Service reinstall with token generation..."
    log_message "This will:"
    log_message "  1. Uninstall existing service"
    log_message "  2. Install fresh service"
    log_message "  3. Generate fresh JWT tokens (1 year expiry)"
    log_message "  4. Start service"
    log_message "  5. Verify installation"
    echo
    
    check_root
    
    uninstall_service
    install_service
    generate_tokens
    start_service
    verify_installation
    
    echo
    log_success "ðŸŽ‰ Complete reinstall with fresh tokens completed!"
    log_message "ðŸ“‹ Next steps:"
    log_message "  - Test API endpoints: node comprehensive_api_test.js"
    log_message "  - Run client tests: cd $CLIENT_DIR && npm run test:integration"
    log_message "  - Check server logs: sudo journalctl -u camera-service -f"
}

# Run main function
main "$@"
