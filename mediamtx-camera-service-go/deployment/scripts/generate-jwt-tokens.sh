#!/bin/bash

# JWT Token Generation Script for MediaMTX Camera Service
# Generates proper JWT tokens that the server's authenticate method expects

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
TEST_TOKENS_DIR="$PROJECT_ROOT/config/test/jwt-tokens"
CLIENT_DIR="$PROJECT_ROOT/../MediaMTX-Camera-Service-Client/client"

# JWT Configuration (from server config)
JWT_SECRET="edge-device-secret-key-change-in-production"
JWT_EXPIRY_HOURS=48

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if jq is available
check_dependencies() {
    if ! command -v jq >/dev/null 2>&1; then
        log_error "jq is required but not installed"
        log_info "Install with: sudo apt-get install jq"
        exit 1
    fi
}

# Generate JWT token using Node.js (since we need to match the Go implementation)
generate_jwt_token() {
    local user_id=$1
    local role=$2
    local expiry_hours=${3:-$JWT_EXPIRY_HOURS}
    
    # Create a temporary Node.js script to generate JWT token
    local temp_script=$(mktemp)
    cat > "$temp_script" << EOF
const jwt = require('jsonwebtoken');

const secret = '$JWT_SECRET';
const now = Math.floor(Date.now() / 1000);
const exp = now + ($expiry_hours * 3600);

const payload = {
  user_id: '$user_id',
  role: '$role',
  iat: now,
  exp: exp
};

const token = jwt.sign(payload, secret, { algorithm: 'HS256' });
console.log(token);
EOF

    # Check if jsonwebtoken is available in client node_modules
    if [ -f "$CLIENT_DIR/node_modules/jsonwebtoken/package.json" ]; then
        # Use client's jsonwebtoken
        node -r "$CLIENT_DIR/node_modules/jsonwebtoken" "$temp_script" 2>/dev/null
    else
        # Try to use system node with jsonwebtoken
        log_warning "jsonwebtoken not found in client, trying system installation..."
        if command -v npm >/dev/null 2>&1; then
            # Install jsonwebtoken temporarily
            npm install jsonwebtoken >/dev/null 2>&1 || true
            node -r "./node_modules/jsonwebtoken" "$temp_script" 2>/dev/null || {
                log_error "Failed to generate JWT token"
                rm -f "$temp_script"
                return 1
            }
        else
            log_error "Node.js and npm are required for JWT token generation"
            rm -f "$temp_script"
            return 1
        fi
    fi
    
    rm -f "$temp_script"
}

# Generate JWT tokens for all roles
generate_all_tokens() {
    log_info "Generating JWT tokens for all roles..."
    
    # Ensure directory exists
    mkdir -p "$TEST_TOKENS_DIR"
    
    # Generate tokens for each role
    local viewer_token=$(generate_jwt_token "test_viewer" "viewer")
    local operator_token=$(generate_jwt_token "test_operator" "operator")
    local admin_token=$(generate_jwt_token "test_admin" "admin")
    
    if [ -z "$viewer_token" ] || [ -z "$operator_token" ] || [ -z "$admin_token" ]; then
        log_error "Failed to generate JWT tokens"
        exit 1
    fi
    
    # Create tokens JSON file
    cat > "$TEST_TOKENS_DIR/jwt-tokens.json" << EOF
{
  "tokens": {
    "viewer": {
      "token": "$viewer_token",
      "user_id": "test_viewer",
      "role": "viewer",
      "expires_in_hours": $JWT_EXPIRY_HOURS
    },
    "operator": {
      "token": "$operator_token",
      "user_id": "test_operator", 
      "role": "operator",
      "expires_in_hours": $JWT_EXPIRY_HOURS
    },
    "admin": {
      "token": "$admin_token",
      "user_id": "test_admin",
      "role": "admin", 
      "expires_in_hours": $JWT_EXPIRY_HOURS
    }
  },
  "generated_at": "$(date -Iseconds)",
  "jwt_secret": "$JWT_SECRET",
  "algorithm": "HS256"
}
EOF
    
    # Create environment file
    cat > "$TEST_TOKENS_DIR/jwt-tokens.env" << EOF
# JWT Tokens Environment Variables
# Generated by generate-jwt-tokens.sh

export JWT_SECRET="$JWT_SECRET"
export TEST_VIEWER_TOKEN="$viewer_token"
export TEST_OPERATOR_TOKEN="$operator_token"
export TEST_ADMIN_TOKEN="$admin_token"
EOF
    
    log_success "JWT tokens generated successfully"
    log_info "Tokens stored in: $TEST_TOKENS_DIR"
}

# Update client test environment
update_client_env() {
    log_info "Updating client test environment..."
    
    local tokens_file="$TEST_TOKENS_DIR/jwt-tokens.json"
    local client_env="$CLIENT_DIR/.test_env"
    
    if [ ! -f "$tokens_file" ]; then
        log_error "JWT tokens file not found: $tokens_file"
        exit 1
    fi
    
    # Extract tokens using jq
    local viewer_token=$(jq -r '.tokens.viewer.token' "$tokens_file")
    local operator_token=$(jq -r '.tokens.operator.token' "$tokens_file")
    local admin_token=$(jq -r '.tokens.admin.token' "$tokens_file")
    
    # Update client .test_env file
    cat > "$client_env" << EOF
# Test Environment Configuration for MediaMTX Camera Service Client
# Generated by generate-jwt-tokens.sh

# JWT Configuration
export CAMERA_SERVICE_JWT_SECRET="$JWT_SECRET"

# JWT Tokens (for authentication)
export TEST_VIEWER_TOKEN="$viewer_token"
export TEST_OPERATOR_TOKEN="$operator_token"
export TEST_ADMIN_TOKEN="$admin_token"

# Legacy API Keys (deprecated - use JWT tokens instead)
export TEST_VIEWER_KEY="$viewer_token"
export TEST_OPERATOR_KEY="$operator_token"
export TEST_ADMIN_KEY="$admin_token"

# Server Configuration
export CAMERA_SERVICE_HOST=localhost
export CAMERA_SERVICE_PORT=8002
export CAMERA_SERVICE_WS_PATH=/ws
export CAMERA_SERVICE_HEALTH_PORT=8003
export CAMERA_SERVICE_HEALTH_PATH=/health
EOF
    
    log_success "Client test environment updated: $client_env"
}

# Copy tokens to client fixtures
copy_to_client() {
    log_info "Copying JWT tokens to client fixtures..."
    
    local tokens_file="$TEST_TOKENS_DIR/jwt-tokens.json"
    local client_fixtures="$CLIENT_DIR/tests/fixtures"
    
    # Ensure client fixtures directory exists
    mkdir -p "$client_fixtures"
    
    # Copy tokens file
    cp "$tokens_file" "$client_fixtures/jwt-tokens.json"
    
    log_success "JWT tokens copied to client fixtures"
}

# Test JWT token validation
test_tokens() {
    log_info "Testing JWT token validation..."
    
    local tokens_file="$TEST_TOKENS_DIR/jwt-tokens.json"
    
    if [ ! -f "$tokens_file" ]; then
        log_error "JWT tokens file not found: $tokens_file"
        exit 1
    fi
    
    # Extract and test each token
    local viewer_token=$(jq -r '.tokens.viewer.token' "$tokens_file")
    local operator_token=$(jq -r '.tokens.operator.token' "$tokens_file")
    local admin_token=$(jq -r '.tokens.admin.token' "$tokens_file")
    
    log_info "Generated tokens:"
    log_info "  Viewer:  ${viewer_token:0:50}..."
    log_info "  Operator: ${operator_token:0:50}..."
    log_info "  Admin:   ${admin_token:0:50}..."
    
    log_success "JWT token generation completed successfully!"
}

# Main execution
main() {
    log_info "Starting JWT token generation for MediaMTX Camera Service..."
    
    # Check dependencies
    check_dependencies
    
    # Generate all tokens
    generate_all_tokens
    
    # Update client environment
    update_client_env
    
    # Copy to client fixtures
    copy_to_client
    
    # Test tokens
    test_tokens
    
    echo ""
    log_info "Next steps:"
    log_info "  1. Test authentication: cd $CLIENT_DIR && source .test_env"
    log_info "  2. Run integration tests: npm run test:integration -- --testPathPattern=\"authenticated_functionality\""
    echo ""
    log_success "JWT token generation completed successfully!"
}

# Run main function
main "$@"
