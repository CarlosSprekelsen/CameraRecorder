#!/bin/bash

# JWT Token Generation Script for MediaMTX Camera Service
# Generates JWT tokens using the server's CLI tool

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
JWT_GENERATOR="$PROJECT_ROOT/cmd/jwt-generator/main.go"
JWT_TOKENS_DIR="$PROJECT_ROOT/config/test/jwt-tokens"
CLIENT_DIR="$(cd "$PROJECT_ROOT/../MediaMTX-Camera-Service-Client/client" && pwd)"

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Show usage
show_usage() {
    echo "JWT Token Generation Script for MediaMTX Camera Service"
    echo ""
    echo "Usage: $0 [options]"
    echo ""
    echo "Options:"
    echo "  --expiry-hours HOURS    Token expiry in hours (default: 48)"
    echo "  --secret-key KEY        JWT secret key (default: from config)"
    echo "  --help                  Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0                      Generate tokens with default 48h expiry"
    echo "  $0 --expiry-hours 72    Generate tokens with 72h expiry"
}

# Parse command line arguments
EXPIRY_HOURS=48
JWT_SECRET=""

while [[ $# -gt 0 ]]; do
    case $1 in
        --expiry-hours)
            EXPIRY_HOURS="$2"
            shift 2
            ;;
        --secret-key)
            JWT_SECRET="$2"
            shift 2
            ;;
        --help)
            show_usage
            exit 0
            ;;
        *)
            log_error "Unknown option: $1"
            show_usage
            exit 1
            ;;
    esac
done

# Validate expiry hours
if ! [[ "$EXPIRY_HOURS" =~ ^[0-9]+$ ]] || [ "$EXPIRY_HOURS" -lt 1 ]; then
    log_error "Expiry hours must be a positive integer"
    exit 1
fi

# Check if JWT generator exists
if [ ! -f "$JWT_GENERATOR" ]; then
    log_error "JWT generator not found at $JWT_GENERATOR"
    log_error "Make sure the source code is available"
    exit 1
fi

# Create JWT tokens directory
mkdir -p "$JWT_TOKENS_DIR"

log_info "Generating JWT tokens with $EXPIRY_HOURS hours expiry..."

# Generate JWT tokens for each role
ROLES=("viewer" "operator" "admin")
declare -A TOKENS

for role in "${ROLES[@]}"; do
    log_info "Generating JWT token for role: $role"
    
    # Use the JWT generator tool
    if [ -n "$JWT_SECRET" ]; then
        # Use provided secret key
        TOKEN_OUTPUT=$(cd "$PROJECT_ROOT" && go run "$JWT_GENERATOR" --role "$role" --expiry-hours "$EXPIRY_HOURS" --secret-key "$JWT_SECRET" --format token 2>/dev/null || echo "")
    else
        # Use default secret key from server config
        TOKEN_OUTPUT=$(cd "$PROJECT_ROOT" && go run "$JWT_GENERATOR" --role "$role" --expiry-hours "$EXPIRY_HOURS" --format token 2>/dev/null || echo "")
    fi
    
    if [ -z "$TOKEN_OUTPUT" ]; then
        log_error "Failed to generate JWT token for $role"
        exit 1
    fi
    
    TOKENS["$role"]="$TOKEN_OUTPUT"
    log_success "Generated JWT token for $role"
done

# Create JWT tokens JSON file
JWT_JSON_FILE="$JWT_TOKENS_DIR/jwt-tokens.json"
cat > "$JWT_JSON_FILE" << EOF
{
  "tokens": {
    "viewer": {
      "token": "${TOKENS[viewer]}",
      "user_id": "test_viewer",
      "role": "viewer",
      "expires_in_hours": $EXPIRY_HOURS
    },
    "operator": {
      "token": "${TOKENS[operator]}",
      "user_id": "test_operator",
      "role": "operator",
      "expires_in_hours": $EXPIRY_HOURS
    },
    "admin": {
      "token": "${TOKENS[admin]}",
      "user_id": "test_admin",
      "role": "admin",
      "expires_in_hours": $EXPIRY_HOURS
    }
  },
  "generated_at": "$(date -Iseconds)",
  "jwt_secret": "$JWT_SECRET",
  "algorithm": "HS256"
}
EOF

# Create environment file for client
ENV_FILE="$CLIENT_DIR/.test_env"
cat > "$ENV_FILE" << EOF
# JWT Tokens Environment Variables
# Generated by generate-jwt-tokens.sh

export TEST_VIEWER_TOKEN="${TOKENS[viewer]}"
export TEST_OPERATOR_TOKEN="${TOKENS[operator]}"
export TEST_ADMIN_TOKEN="${TOKENS[admin]}"

# Legacy API Keys (not used for authentication)
export TEST_VIEWER_KEY=""
export TEST_OPERATOR_KEY=""
export TEST_ADMIN_KEY=""

# Server Configuration
export CAMERA_SERVICE_HOST=localhost
export CAMERA_SERVICE_PORT=8002
export CAMERA_SERVICE_WS_PATH=/ws
export CAMERA_SERVICE_HEALTH_PORT=8003
export CAMERA_SERVICE_HEALTH_PATH=/health
EOF

# Copy tokens to client fixtures
CLIENT_FIXTURES="$CLIENT_DIR/tests/fixtures/test_jwt_tokens.json"
mkdir -p "$(dirname "$CLIENT_FIXTURES")"
cp "$JWT_JSON_FILE" "$CLIENT_FIXTURES"

log_success "JWT tokens generated successfully:"
log_info "  JSON: $JWT_JSON_FILE"
log_info "  ENV:  $ENV_FILE"
log_info "  Client: $CLIENT_FIXTURES"

# Display token info
echo ""
log_info "Token Information:"
for role in "${ROLES[@]}"; do
    token="${TOKENS[$role]}"
    token_preview="${token:0:50}..."
    log_info "  $role: $token_preview"
done

echo ""
log_success "JWT token generation completed!"
log_info "Use these tokens in your client tests with the 'authenticate' method"
