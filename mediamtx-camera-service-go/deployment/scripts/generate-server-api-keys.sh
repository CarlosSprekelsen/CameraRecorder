#!/bin/bash

# Server API Key Generation Script for MediaMTX Camera Service
# Generates API keys in the correct format expected by the server
# Based on the server's API key management configuration

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Configuration
SERVER_CONFIG="/opt/camera-service/config/default.yaml"
API_KEYS_FILE="/opt/camera-service/api-keys.json"
OUTPUT_FILE="server_api_keys.json"
ENV_FILE="server_api_keys.env"

log_info "Generating server API keys for MediaMTX Camera Service..."
log_info "Server Config: $SERVER_CONFIG"
log_info "API Keys File: $API_KEYS_FILE"

# Check if config exists
if [ ! -f "$SERVER_CONFIG" ]; then
    log_error "Server config not found at $SERVER_CONFIG"
    exit 1
fi

# Generate API keys in the correct server format
generate_server_api_keys() {
    log_info "Generating API keys in server format..."
    
    # Initialize the API keys JSON structure
    cat > "$OUTPUT_FILE" << 'EOF'
{
  "keys": {
EOF

    local first_key=true
    
    # Generate keys for each role
    roles=("viewer" "operator" "admin")
    for role in "${roles[@]}"; do
        log_info "Generating API key for role: $role"
        
        # Generate secure random key (32 bytes as per config)
        key_bytes=$(openssl rand -hex 32)
        
        # Create key ID
        key_id="key_${role}_$(date +%s)_$(echo $key_bytes | cut -c1-8)"
        
        # Create the full key with csk_ prefix (base64url format as per config)
        full_key="csk_$(echo $key_bytes | base64 | tr -d '=' | tr '+/' '-_' | tr -d '\n')"
        
        # Calculate expiry (90 days from now as per config)
        expires_at=$(date -d '+90 days' -Iseconds)
        created_at=$(date -Iseconds)
        
        # Add to JSON (handle comma placement)
        if [ "$first_key" = true ]; then
            first_key=false
        else
            echo "," >> "$OUTPUT_FILE"
        fi
        
        cat >> "$OUTPUT_FILE" << EOF
    "$key_id": {
      "id": "$key_id",
      "key": "$full_key",
      "role": "$role",
      "created_at": "$created_at",
      "expires_at": "$expires_at",
      "description": "Generated API key for $role role",
      "last_used": "1970-01-01T00:00:00Z",
      "usage_count": 0,
      "status": "active"
    }
EOF
        
        log_success "Generated $role key: ${full_key:0:20}..."
    done
    
    # Close the JSON structure
    cat >> "$OUTPUT_FILE" << 'EOF'
  }
}
EOF
    
    log_success "Server API keys generated in $OUTPUT_FILE"
}

# Create environment variables file
create_env_file() {
    log_info "Creating environment variables file..."
    
    cat > "$ENV_FILE" << 'EOF'
# Server API Keys Environment Variables
# Generated by generate-server-api-keys.sh
EOF

    # Extract keys from JSON and create environment variables
    if command -v jq >/dev/null 2>&1; then
        # Use jq if available
        viewer_key=$(jq -r '.keys | to_entries[] | select(.value.role == "viewer") | .value.key' "$OUTPUT_FILE")
        operator_key=$(jq -r '.keys | to_entries[] | select(.value.role == "operator") | .value.key' "$OUTPUT_FILE")
        admin_key=$(jq -r '.keys | to_entries[] | select(.value.role == "admin") | .value.key' "$OUTPUT_FILE")
        
        echo "export SERVER_VIEWER_KEY=\"$viewer_key\"" >> "$ENV_FILE"
        echo "export SERVER_OPERATOR_KEY=\"$operator_key\"" >> "$ENV_FILE"
        echo "export SERVER_ADMIN_KEY=\"$admin_key\"" >> "$ENV_FILE"
        
        log_success "Environment variables created in $ENV_FILE"
    else
        log_warning "jq not available, environment variables not created"
    fi
}

# Install keys to server (requires sudo)
install_keys_to_server() {
    log_info "Installing API keys to server..."
    
    if [ -f "$API_KEYS_FILE" ]; then
        log_info "Backing up existing API keys file..."
        sudo cp "$API_KEYS_FILE" "${API_KEYS_FILE}.backup.$(date +%s)"
    fi
    
    log_info "Installing new API keys to server..."
    sudo cp "$OUTPUT_FILE" "$API_KEYS_FILE"
    sudo chown camera-service:camera-service "$API_KEYS_FILE"
    sudo chmod 600 "$API_KEYS_FILE"
    
    log_success "API keys installed to server"
}

# Main execution
main() {
    log_info "Starting server API key generation..."
    
    # Generate the keys
    generate_server_api_keys
    
    # Create environment file
    create_env_file
    
    # Install to server
    install_keys_to_server
    
    log_info "API key generation completed successfully!"
    echo ""
    log_info "Generated files:"
    log_info "  - $OUTPUT_FILE (JSON format)"
    log_info "  - $ENV_FILE (Environment variables)"
    echo ""
    
    if command -v jq >/dev/null 2>&1; then
        log_info "Generated API Keys:"
        jq -r '.keys | to_entries[] | "\(.value.role): \(.value.key)"' "$OUTPUT_FILE"
    else
        log_info "Install jq to view formatted API keys"
    fi
    
    echo ""
    log_info "To use these keys:"
    log_info "  1. Copy to client: cp $OUTPUT_FILE MediaMTX-Camera-Service-Client/client/test_api_keys.json"
    log_info "  2. Source environment: source $ENV_FILE"
    log_info "  3. Update client .test_env with the new keys"
    echo ""
    log_info "Server API keys are now installed and ready for use!"
}

# Run main function
main "$@"
