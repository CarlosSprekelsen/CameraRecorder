#!/bin/bash

# Test Environment Setup for MediaMTX Camera Service Go
# Purpose: Creates test environment configuration
# Usage: ./tests/tools/setup_test_environment.sh

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Generate test JWT secret
generate_jwt_secret() {
    log_info "Generating test JWT secret..."
    openssl rand -hex 32
}

# Create test API keys file
create_test_api_keys() {
    log_info "Creating test API keys file..."
    
    cat > /tmp/test_api_keys.json << EOF
{
    "test_user": {
        "key": "test_api_key_$(openssl rand -hex 16)",
        "role": "operator",
        "permissions": ["view", "control"]
    },
    "test_admin": {
        "key": "test_admin_key_$(openssl rand -hex 16)",
        "role": "admin",
        "permissions": ["view", "control", "admin"]
    },
    "test_viewer": {
        "key": "test_viewer_key_$(openssl rand -hex 16)",
        "role": "viewer",
        "permissions": ["view"]
    }
}
EOF
    
    log_success "Test API keys created at /tmp/test_api_keys.json"
}

# Create test environment file
create_test_env() {
    log_info "Creating test environment file..."
    
    cat > .test_env << EOF
# Test Environment Configuration for MediaMTX Camera Service Go
# Generated by setup_test_environment.sh

# JWT Configuration
export CAMERA_SERVICE_JWT_SECRET="$(generate_jwt_secret)"

# API Keys Configuration
export CAMERA_SERVICE_API_KEYS_PATH="/tmp/test_api_keys.json"

# Test Directories
export CAMERA_SERVICE_TEST_RECORDINGS_DIR="/tmp/test_recordings"
export CAMERA_SERVICE_TEST_SNAPSHOTS_DIR="/tmp/test_snapshots"

# MediaMTX Configuration
export CAMERA_SERVICE_MEDIAMTX_API_URL="http://localhost:9997"
export CAMERA_SERVICE_MEDIAMTX_RTSP_PORT="8554"
export CAMERA_SERVICE_MEDIAMTX_WEBRTC_PORT="8889"
export CAMERA_SERVICE_MEDIAMTX_HLS_PORT="8888"

# WebSocket Configuration
export CAMERA_SERVICE_WEBSOCKET_PORT="8002"

# Health Endpoints Configuration
export CAMERA_SERVICE_HEALTH_PORT="8003"

# Test Configuration
export CAMERA_SERVICE_TEST_MODE="true"
export CAMERA_SERVICE_LOG_LEVEL="debug"
EOF
    
    log_success "Test environment file created: .test_env"
}

# Create test directories
create_test_directories() {
    log_info "Creating test directories..."
    
    mkdir -p /tmp/test_recordings
    mkdir -p /tmp/test_snapshots
    mkdir -p /tmp/test_logs
    
    log_success "Test directories created"
}

# Set permissions
set_permissions() {
    log_info "Setting test file permissions..."
    
    chmod 600 /tmp/test_api_keys.json
    chmod 755 /tmp/test_recordings
    chmod 755 /tmp/test_snapshots
    chmod 755 /tmp/test_logs
    
    log_success "Test file permissions set"
}

# Validate MediaMTX service
validate_mediamtx_service() {
    log_info "Validating MediaMTX service..."
    
    if ! systemctl is-active --quiet mediamtx; then
        log_warning "MediaMTX service is not running"
        log_info "To start MediaMTX service: sudo systemctl start mediamtx"
    else
        log_success "MediaMTX service is running"
    fi
}

# Main function
main() {
    log_info "Setting up test environment for MediaMTX Camera Service Go..."
    
    # Create test directories
    create_test_directories
    
    # Create test API keys
    create_test_api_keys
    
    # Create test environment file
    create_test_env
    
    # Set permissions
    set_permissions
    
    # Validate MediaMTX service
    validate_mediamtx_service
    
    log_success "Test environment setup completed"
    log_info "To use test environment, run: source .test_env"
    log_info "To run tests: ./tests/tools/run_tests.sh [category]"
}

# Run main function
main "$@"
